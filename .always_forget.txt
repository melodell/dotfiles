# .always_forget.txt
#
# Melina O'Dell


########################################
#
# Keyboard Shortcuts
#

# Text editing
CMD + Delete			# Delete an entire line
OPTION + Delete 		# Delete an entire word
OPTION + L/R Arrow              # Move between entire words
OPTION + U/D Arrow              # Move between paragraphs
CMD + L/R Arrow                 # Move between front/back of lines
CMD + U/D Arrow                 # Move between top/bottom of entire page/text
CMD + OPTION + L/R Arrow        # Move between single characters
FN + U/D Arrow                  # Move up/down one page
CMD + Shift + Arrow		# Select ALL text L/R/U/D
OPTION + Shift + Arrow		# Select text L/R in current word

# Unix
CTRL + U                        # Delete entire line
CTRL + L                        # Clear terminal
CTRL + C                        # Cancel running program
CTRL + D                        # End file/stream (EECS484: Exit SQL*Plus) 

# MacOS
CMD + N				# Open new window (for current application)
CMD + W                         # Close current window
CMD + Q                         # Quit application
CMD + Tab			# Scroll through open applications
CMD + Tab, Tab + OPTION		# Select and unminimize an open application
CMD + M				# Minimize current application
CTRL + Arrow			# Move L/R between desktop views
FN + F                          # Make current window fullscreen (creates new desktop)
CMD + CTRL + Q                  # Lock screen
CMD + SHIFT + 3                 # Take screenshot of entire screen
CMD + SHIFT + 4                 # Take screenshot of selected portion

# Browser
CMD + T 			# New tab
CMD + R				# Refresh tab
CMD + Shift + R			# Hard Refresh tab
CMD + OPTION + I		# Open Developer Tools
CMD + OPTION + U                # View Source (in new tab)
CMD + OPTION + Arrow		# Move L/R between tabs in browser
CMD + W				# Close current tab
CMD + L				# Move cursor to URL bar
CMD + Arrow			# Move back/forward through search history (back button)
FN + Arrow			# Move between first and last search results in dropdown predictions

# Rectangle (Window Display Utility)
CTRL + OPTION + L/R             # Snap window to L/R side of desktop


########################################
#
# Emacs
#

e <filename>                    # Open file in Emacs (aliased)
e -nw <filename>                # Open Emacs in text-only (no window) mode

emacs --batch -l ~/.emacs.d/init.el               # Process init file at the CLI
emacs --batch -l ~/.emacs.d/init.el \
  --funcall auto-package-update-now               # Update all packages
emacs --batch --funcall byte-recompile-directory  # Recompile all .el files

# Text editing and navigation
C-n + C-p                       # Move between sequential lines
C-f + C-b                       # Move between characters
C-a + C-e                       # Move between front/back of lines
M-{ / }                         # Move between paragraphs
M-< / >                         # Move between top/bottom of entire page/text
S-r                             # Move between top/middle/bottom of window
M-g g                           # Jump to line by number
C-d                             # Delete character to the right
M-d                             # Delete word to the right
C-SHIFT-DELETE                  # Delete an entire line
C-DELETE                        # Delete an entire word
C-k                             # Clear an entire line
C-o                             # Insert a newline below
C-i                             # Move to start of line (from left ONLY)
C-SPACE                         # Set mark (move cursor to select)
C-s                             # Incremental search (C-s again for next result; C-r for prev result; RETURN to stop)
M-%                             # Find and replace (y for one, n for skip, ! for all at once)
C-x C-;                         # Comment out current line
M-;                             # Insert comment (at end) of line
M-; (with selection)            # Comment out selected block
C-q <tab>                       # Insert REAL tab character (in Text mode)
M-w                             # Copy selection
C-w                             # Cut selection
C-y                             # Paste selection
C-x TAB                         # Indent current line
C-/                             # Undo
C-g C-/                         # Redo (undo is implemented with a stack)

# Display
C-x C-c                         # Close Emacs
C-x C-f                         # Open another file in a new buffer
C-x C-b                         # Open list of open buffers (for switching)
C-x 2                           # Split into two windows (VERTICALLY)
C-x 3                           # Split into two windows (HORIZONTALLY)
C-x o                           # Switch to other window
C-x 0                           # Bring the screen back into one window
C-x k                           # Kill current buffer
C-g                             # Exit current command chain
C-x x g                         # Revert all unsaved changes (read from previous file version)

# Flycheck
C-c ! l                         # Open error list (M-x flycheck-list-errors)


########################################
#
# Commands
#

# Git
git restore .                   # Discard all unstaged changes
git restore --staged FILE       # Unstage FILE
git fetch --prune               # Fetch all changes + clean up deleted remote tracking branches
git reset --hard <commit>       # Move HEAD to <commit> and discard all local changes (including commits)
git reset --soft <commit>       # Move HEAD to <commit> without discarding unstaged changes
git reset HEAD^                 # Revert last commit and keep changes (move them back to unstaged)
git checkout -b <branch_name>   # Create and checkout new branch
git branch -d                   # Delete branch
git branch -D                   # Delete branch (even if remote hasn't cleaned it up yet)

# Unix
pwd                             # Print working directory
cd                              # Change to home directory
cd ..                           # Change to directory up
cd DIR                          # Change to directory
ls                              # Print all files in pwd
ls -a                           # Show all (hidden) files and directories
ls -l                           # (Verbose) Show all (hidden) files and directories
wc                              # Word count
wc -l                           # Line count
touch FILE                      # Create empty file called FILE
rm FILE                         # Delete FILE
rm -r DIR                       # Delete directory
mv FILE NEW_FILE                # Move/rename FILE
cp FILE NEW_FILE                # Copy FILE to NEW_FILE (will overwrite)
cp -r DIR NEW_DIR               # Copy directory DIR to NEW_DIR
file FILE                       # Print type of FILE
diff FILE1 FILE2                # Find differences between FILE1 and FILE2
diff FILE1 FILE2 | colordiff    # diff but colorful

# Scripting
chmod +x SCRIPT                 # Give SCRIPT executable permissions
 
# Tar
tar -xvzf <tarball>		# Extract files from <tarball>.tar.gz (verbose) (aliased to tarx)
tar -cvzf <tarball>		# Compress listed files into <tarball>.tar.gz (verbose)

# Zip
zip -r <filename>.zip <directory>       # Zip directory

# grep
grep <something> <filename>	# Find matches with <something> in <filename>
grep -i ...			# Case-insensitive search
grep -A <num> ...               # Find matches and display <num> trailing lines

# Python
which python                            # Print active Python interpreter location
python3 -m http.server 8000             # Start server from PWD on localhost:8000
python3 -m venv env                     # Initialize virtual environment (called "env")
source env/bin/activate                 # Activate virtual environment
deactivate                              # Deactivate virtual environment
pip install <package>                   # Install Python package
pip install -r requirements.txt         # Install packages from requirements file

# Processes
pgrep <pattern>                 # List all (matching) running processes
pkill <pattern>                 # Kill all (matching) running processes

# Curl
TODO

# SSH
ssh <uniqname>@login.engin.umich.edu                                     # SSH into CAEN Linux
ssh -i <Path to Auth Key File> ubuntu@<Public DNS from Connect Page>     # SSH to AWS EC2 instance

# Syncing files
scp FILE DEST                   # Copy file to remote host over SSH
scp -r DIR DEST                 # Copy directories
scp -i <path to auth key file>  # Specify key file (AWS)
rsync FILE DEST                 # Copy file to destination
rsync -r DIR DEST               # Copy directories
rsync --exclude '.git*'         # don't copy git metadata
________________________________________

  EC2 Examples:

# Move files to AWS instance from local with scp
scp -i <path to auth key file> [-r] <path to files on local> ubuntu@<public DNS from "Connect" page>:<destination path in EC2 instance>

# Move files to local from AWS instance with scp
scp -i <path to auth key file> [-r] ubuntu@<public DNS from "Connect" page>:<path to files on AWS instance> <destination path on local>
________________________________________


# SQL

# Oracle/SQL*Plus (EECS 484)
rlwrap sqlplus                         # Launch SQL*Plus


########################################
#
# Command line fun (Stolen from awdeorio)
#

cowthink                               # ascii art of a cow w/ thought bubble
cowsay STRING                          # ascii art of a cow w/ speech bubble
cowsay -f tux                          # ^^^ penguin
cowsay -l                              # list available characters
fortune                                # print a random adage
fortune | cowsay                       # ascii art + random adage
sl                                     # steam locomotive
asciiquarium                           # ascii art animated aquarium
telnet towel.blinkenlights.nl          # ascii animated Star Wars, C-] to quit
figlet STRING                          # print ascii bubble text
lolcat                                 # rainbow colors
curl http://wttr.in/ann_arbor          # ascii weather report
curl wttr.in/:help                     # ascii weather report help
curl wttr.in?0                         # ascii weather report, only current
curl wttr.in?n                         # ascii weather report, narrow width
curl parrot.live                       # dancing ASCII parrot
